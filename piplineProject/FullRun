pipeline {
    agent any

    environment {
        PYTEST_COMMAND = "${params.pytestCommand}"
        REPORT_DIR_NAME = "${params.resultsDirName}"
        REPORT_DIR_NAME_HTML = "${params.resultsDirName}_html"
        AWS_ACCESS_KEY_ID = credentials('aws_access_key')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_key')
        AWS_S3_BUCKET = "pytest-allure-report-results"
        PATH="/var/lib/jenkins/.local/bin:$PATH:./allure-2.27.0/bin"
    }   
    stages {

        stage('Update Build Name & Description') {
            steps {
                script {
                    currentBuild.displayName = "${env.PYTEST_COMMAND}"
                }
            }
        }

        stage('Install Requirements'){
            steps {
                script {
                    sh "pip3 install -q -r requirements.txt"
                }
            }
        }

        stage('Install Allure') {
            steps {
                script {
                    sh 'wget -q -nv https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz'
                    sh "tar -zxf allure-2.27.0.tgz -C ./"
                    sh "allure --version"
                }
            }
        }
        stage('Run Test') {
            steps {
                script {
                    sh "python3 -m ${env.PYTEST_COMMAND} --alluredir=${env.REPORT_DIR_NAME}"
                }
            }
        }

        stage ('Generate Allure Report') {
            steps {
                script {
                    sh "allure generate --clean --single-file ${env.REPORT_DIR_NAME} -o ${env.REPORT_DIR_NAME_HTML}"
                }
            }
        }


        stage ('Compress The Report Results Files'){
            steps{
                script {
                    sh "zip -r ${env.REPORT_DIR_NAME_HTML}.zip ${env.REPORT_DIR_NAME_HTML}"
                }

            }
        }

        stage ('Set Directory Name'){
            steps {
                script {
                    def todayDate = new Date().format('yyyy-MM-dd')
                    def subDirName = env.REPORT_DIR_NAME_HTML ?: 'default_subdir'
                    def mainDir = todayDate
                    def subDir = "${mainDir}/${subDirName}"
                    sh "mkdir -p ${mainDir}"
                    sh "mkdir -p ${subDir}"
                }
            }
        }


       stage('Upload Results To S3') {
            steps {
                script {
                    def todayDate = new Date().format('yyyy-MM-dd')
                    def full_path = "${todayDate}/${env.REPORT_DIR_NAME_HTML}"
                    sh "mv ${env.REPORT_DIR_NAME_HTML}.zip ${full_path}"
                    sh "aws s3 cp ${full_path}/${env.REPORT_DIR_NAME_HTML}.zip s3://${env.AWS_S3_BUCKET}/${full_path}/"
                    def command = "aws s3 presign s3://${env.AWS_S3_BUCKET}/${full_path}/${env.REPORT_DIR_NAME_HTML}.zip --expires-in=1000"
                    def signed_url = sh(script: command, returnStdout: true).trim()
                    sh(script: "curl -sS -o report.zip '${signed_url}'", returnStatus: true)
                }
            }
        }
    }
        post {
        always {
            archiveArtifacts artifacts: 'report.zip', allowEmptyArchive: true
            deleteDir()
        }
    }
}
